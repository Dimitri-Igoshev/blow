# === 1) HTTP (80): ACME + общий редирект на HTTPS ===
server {
    listen 80;
    listen [::]:80;
    server_name blow.ru www.blow.ru;

    # Для выдачи/обновления сертификатов Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Всё остальное с 80 → на HTTPS c каноническим host=blow.ru
    location / {
        return 301 https://blow.ru$request_uri;
    }
}

# # === 2) HTTPS (443) для www: мгновенный 301 на канонический хост ===
# # Нужен валидный сертификат и для www, чтобы отдать редирект после TLS-рукопожатия.
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name www.blow.ru;

#     ssl_certificate     /etc/letsencrypt/live/blow.ru/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/blow.ru/privkey.pem;
#     ssl_protocols       TLSv1.2 TLSv1.3;

#     return 301 https://blow.ru$request_uri;
# }

# 443: www.blow.ru → 301 на без-www
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.blow.ru;

    # ВАЖНО: путь к сертификатам должен совпадать с volume!
    # Ты монтируешь ./nginx/ssl -> /etc/ssl
    ssl_certificate     /etc/ssl/fullchain.pem;
    ssl_certificate_key /etc/ssl/privkey.pem;

    return 301 https://blow.ru$request_uri;
}

# === 3) HTTPS (443) основной сайт blow.ru ===
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name blow.ru;

    ssl_certificate     /etc/letsencrypt/live/blow.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/blow.ru/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;

    # (опционально) жёсткая фиксация HTTPS. Включай после проверки редиректов и сертификатов:
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # --- WebSocket support ---
    location /socket.io/ {
        proxy_pass http://server:4000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- API ---
    location /api/ {
        proxy_pass http://server:4000/;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- Frontend ---
    location / {
        proxy_pass http://client:3000;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
